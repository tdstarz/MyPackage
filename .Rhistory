#' @export
#'
#' @examples
#'
myncurve = function(mu, sigma){
curve(dnorm(x,mean=mu,sd=sigma), xlim = c(mu-3*sigma, mu + 3*sigma))
}
#'
#' Distribution and integral graph
#'
#' @param a
#'
#' @return a curve
#' @export
#'
#' @examples
#'
myncurve = function(mu=10, sigma=5, a=6){
curve(dnorm(x=a,mean=mu,sd=sigma), xlim = c(mu-3*sigma, mu + 3*sigma))
}
@export
#' Distribution and integral graph
#'
#' @param a
#'
#' @return a curve
#'
#' @examples
#'
#'
#' @export
myncurve = function(mu=10, sigma=5, a=6){
curve(dnorm(x=a,mean=mu,sd=sigma), xlim = c(mu-3*sigma, mu + 3*sigma))
}
#' Distribution and integral graph
#'
#' @param a
#'
#' @return
#'
#' @examples
#'
#'
#' @export
myncurve = function(mu=10, sigma=5, a=6){
curve(dnorm(x=a,mean=mu,sd=sigma), xlim = c(mu-3*sigma, mu + 3*sigma))
}
library(MyPackage)
library(MyPackage)
#' Distribution and integral graph
#'
#' @param a
#'
#' @return
#'
#' @examples
#'
#'
#' @export
myncurve = function(mu=10, sigma=5, a=6){
curve(dnorm(x=a,mean=mu,sd=sigma), xlim = c(mu-3*sigma, mu + 3*sigma))
}
library(MyPackage)
#'
#' @param a
#'
#' @return
#'
#' @examples
#'
#'
#' @export
#' mycurve(10,2,7)
myncurve = function(mu, sigma, a){
curve(dnorm(x=a,mean=mu,sd=sigma), xlim = c(mu-3*sigma, mu + 3*sigma))
xcurve=seq(-3*sigma,a,length=1000)
ycurve=dnorm(xcurve,mu,sigma)
polygon(c(-3*sigma,xcurve,a),c(0,ycurve,0),col="Pink")
prob=pnorm(a,mu,sigma)
prob=round(prob,4)
text(x=a,y=0.05,paste("Area =", prob, sep = ""))
}
library(MyPackage)
library(MyPackage)
library(MyPackage)
#'
#' @param a
#'
#' @return
#'
#' @examples
#'
#'
#' @export
#'
fire=read.csv(“FIREDAM.csv”)
fire=read.csv(file.choose())
fire
usethis::use_data(fire)
library(MyPackage)
sm2=apply(data,2,mean) #C - This takes the data set and makes a list of numbers to pull from and adds them together
w=myclt(n=10,iter=10000)
#'
#' @param n sample size
#'
#' @return data point
#'
#' @examples
#'
#'
#'
#' @export
myclt=function(n,iter){
y=runif(n*iter,0,5) # A - This creates a uniform sample distribution. The distribution will have a mean of 0 and standard deviation of 5
data=matrix(y,nr=n,nc=iter,byrow=TRUE) #B - This gives us a matrix for the sample data that can be used for plotting the data
sm=apply(data,2,sum) #C - This takes the data set and makes a list of numbers to pull from and adds them together
hist(sm)
sm
}
@export
#'
#' @param n sample size
#'
#' @return data point
#'
#' @examples
#'
#'
#'
#' @export
myclt=function(n,iter){
y=runif(n*iter,0,5) # A - This creates a uniform sample distribution. The distribution will have a mean of 0 and standard deviation of 5
data=matrix(y,nr=n,nc=iter,byrow=TRUE) #B - This gives us a matrix for the sample data that can be used for plotting the data
sm=apply(data,2,sum) #C - This takes the data set and makes a list of numbers to pull from and adds them together
hist(sm)
sm
}
#'
#' @param n sample size
#'
#' @return data point
#'
#' @examples
#'
#'
#'
#' @export
myclt=function(n,iter){
y=runif(n*iter,0,5) # A - This creates a uniform sample distribution. The distribution will have a mean of 0 and standard deviation of 5
data=matrix(y,nr=n,nc=iter,byrow=TRUE) #B - This gives us a matrix for the sample data that can be used for plotting the data
sm=apply(data,2,sum) #C - This takes the data set and makes a list of numbers to pull from and adds them together
hist(sm)
sm
}
library(usethis)
use_vignette(name="math4753pack", title="Documentation for Functions")
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
#' Makes a histogram of a given sample of the bootstrap function
#'
#' @param a
#'
#' @return
#'
#' @examples
#'
#'
#' @export
myboot2<-function(iter=10000,x,fun="mean",alpha=0.05,cx=1.5,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap Sample Statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0,paste("(",round(ci[1],2),sep=""),col="Red",cex=cx)
text(ci[2],0,paste(round(ci[2],2),")",sep=""),col="Red",cex=cx)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=cx)
invisible(list(ci=ci,fun=fun,x=x))# Some output to use if necessary
}
library(MyPackage)
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun,x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
library(MyPackage)
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun,x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
logbin=function(x,param)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
library(MyPackage)
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun=logbin=function(x,param),x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun=function(x,param),x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun=function(x,param),x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun=function(x,param),x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
logbin=function(x,param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun,x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
logbin=function(x,param)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
#' Makes a plot of the maximum likelihood of a data set
#'
#' @param x
#'
#' @return
#'
#' @examples
#'
#'
#' @export
mymaxlik=function(lfun,x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
library(MyPackage)
#' Finds the default confidence for a 2 sample problem
#'
#' @param x random single sample
#'
#' @return conf interval
#'
#'
#'
#' @export
#' @examples x = rnorm(20, mean=10, sd=2)
myci<-function(x){
return(t.test(x)$conf.int)
}
library(MyPackage)
#' Finds the default confidence for a 2 sample problem
#'
#' @param x random single sample
#'
#' @return conf interval
#'
#'
#'
#' @export
#' @examples x = rnorm(30, mean=10, sd=12)
myci<-function(x){
return(t.test(x)$conf.int)
}
library(MyPackage)
